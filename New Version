from math import log2
import time
import random

f = open("cuvinte_wordle.txt",'r')
# g = open("output.txt",'w',encoding='utf-8')
words = [x.strip() for x in f]
f = open("cuvinte_wordle.txt",'r')
words2 = [x.strip() for x in f]
# words = ["TAREI",'ZULIE', 'ZULUF', 'ZVELT']

best_word = ''
max_entropy = 0

def Entropy(word):
    patterns={}
    for x in words:
        pattern=''
        for i in range(5):
            if x[i]== word[i]:
                pattern+='ðŸŸ©'
            elif word[i] in x:
                pattern+='ðŸŸ¨'    
            else:
                pattern+='â¬œ'
        if pattern in patterns:
            patterns[pattern]+=1
        else:
            patterns[pattern]=1
        # print(pattern)
    entropy=0
    for x in patterns:
        
        probability=patterns[x]/len(words)
        entropy+=probability*log2(probability)
    return -entropy

def find_best_word():
    global best_word,max_entropy

    best_word = ''
    max_entropy = 0

    for word in words:
        entropy = Entropy(word)

        if entropy > max_entropy and len(words)>1:
            best_word  = word
            max_entropy = entropy
        elif len(words) == 1:
            best_word = words[0]


def check_word(word):
    f = open('output.txt',encoding='utf-8')

    pattern = f.readline()

    for i in range(5):
        if pattern[i] == 'â¬œ':
            if best_word[i] in word:
                return 0
        elif pattern[i] == 'ðŸŸ¨':
            #MAROI TAREI
            if best_word[i] == word[i]:
                return 0
            if best_word[i] not in word:
                return 0
        elif pattern[i] == 'ðŸŸ©':
            if not best_word[i] == word[i]:
                return 0
    return 1

             
def check_letters():
    global words

    copie = words.copy()

    for word in copie:
        if check_word(word) == 0:
            words.remove(word)
    

def generate_structure(given_word,given_structure):
    for word in words:
        pattern = ''
        for i in range(5):
            if given_word[i] == word[i]:
                pattern += 'ðŸŸ©'
            elif given_word[i] in word:
                pattern += 'ðŸŸ¨'
            else:
                pattern += 'â¬œ'
        if pattern == given_structure:
            return word

def output_joc(chosen_word):
    g = open("output.txt",'w',encoding='utf-8')
    pattern = ''
    for i in range(5):
        if best_word[i] == chosen_word[i]:
            pattern += 'ðŸŸ©'
        elif best_word[i] in chosen_word:
            pattern += 'ðŸŸ¨'
        else:
            pattern += 'â¬œ'
    # print(pattern)
    g.write(pattern)

# chosen_word = words2[int(random.random()*11453)]
chosen_word = "ORALA"

def solve():
    check_letters()
    find_best_word()
    output_joc(chosen_word)
    # print(words)

best_word = "TAREI"

print('=='+chosen_word)
print("*TAREI")
before = time.time()
output_joc(chosen_word)
i=1
while not chosen_word == best_word:
    solve()
    print("*"+best_word)
    i += 1
print("Incercari: ",i)
print(time.time()-before)
